name: Test EE RHEL image

on:
  workflow_dispatch:
    inputs:
      HZ_VERSION:
        description: 'Version of Hazelcast to test the image for, e.g. 5.1.1, 5.0.1'
        required: true

jobs:
  test:
    env:
      SCAN_REGISTRY: "quay.io"
      HZ_VERSION: ${{ inputs.HZ_VERSION }}
      PROJECT_NAME: test-${{ github.run_id }}-${{ github.run_attempt }}
    environment: live
    runs-on: ubuntu-latest
    steps:
      - name: Set HZ version as environment variable
        if: env.HZ_VERSION == ''
        run: |
          echo "HZ_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v5

      - uses: madhead/semver-utils@latest
        id: version
        with:
          version: ${{ env.HZ_VERSION }}

      - name: Setup Docker
        uses: ./.github/actions/setup-docker

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            OCP_LOGIN_USERNAME,CN/OCP_USERNAME
            OCP_LOGIN_PASSWORD,CN/OCP_PASSWORD
            OCP_CLUSTER_URL,CN/OCP_CLUSTER_URL

      - name: Set scan registry secrets
        id: scan_registry_secrets
        run: |
          echo "USERNAMD=redhat-isv-containers+${{ secrets[format('RHEL_PROJECT_ID_V{0}', steps.version.outputs.major)] }}-robot" >> ${GITHUB_OUTPUT}
          echo "PASSWORD=${{ secrets[format('SCAN_REGISTRY_PASSWORD_V{0}', steps.version.outputs.major)] }}" >> ${GITHUB_OUTPUT}

      - name: Log in to Red Hat Scan Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.SCAN_REGISTRY }}
          username: ${{ steps.scan_registry_secrets.outputs.USERNAME }}
          password: ${{ steps.scan_registry_secrets.outputs.PASSWORD }}

      - name: Install `oc` OpenShift tool from mirror
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: "latest"
          source: mirror
          skip_cache: true

      - uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ env.OCP_CLUSTER_URL }}
          openshift_username: ${{ env.OCP_LOGIN_USERNAME }}
          openshift_password: ${{ env.OCP_LOGIN_PASSWORD }}
          insecure_skip_tls_verify: true

      - name: Deploy Hazelcast Cluster from RedHat Registry
        run: |
          # CREATE PROJECT
          oc new-project "${PROJECT_NAME}"

          oc create secret generic hz-license-secret \
            --from-literal=key="${{ secrets.HZ_ENTERPRISE_LICENSE }}"

          helm repo add hazelcast https://hazelcast-charts.s3.amazonaws.com/
          helm repo update

          CHART=hazelcast/hazelcast-enterprise

          HZ_MC_VERSION=$(helm show values "${CHART}" | yq '.mancenter.image.tag')

          helm install "${PROJECT_NAME}" "${CHART}" \
            --set image.repository="registry.connect.redhat.com/hazelcast/hazelcast-enterprise-${{ steps.version.outputs.major }}-rhel8" \
            --set image.tag="${HZ_VERSION}" \
            --set image.pullPolicy="Always" \
            --set hazelcast.licenseKeySecretName="hz-license-secret" \
            --set securityContext.enabled=false \
            --set mancenter.enabled=true \
            --set mancenter.image.pullPolicy="Always" \
            --set mancenter.image.repository="registry.connect.redhat.com/hazelcast/management-center-${HZ_MC_VERSION:0:1}-rhel8"

      - name: Validate Cluster Size
        run: |
          NAME=hazelcast-enterprise

          source .github/scripts/cluster-verification.sh

          CLUSTER_SIZE=$(helm get values "${PROJECT_NAME}" --all | yq '.cluster.memberCount')

          wait_for_last_member_initialization ${CLUSTER_SIZE}

          verify_cluster_size ${CLUSTER_SIZE}

          echo "Waiting for ${PROJECT_NAME}-${NAME}-mancenter-0 pod to be ready"
          oc wait --for=condition=Ready --timeout=300s pod "${PROJECT_NAME}-${NAME}-mancenter-0"

          verify_management_center ${CLUSTER_SIZE}

      - name: Get OpenShift logs
        if: ${{ always() }}
        run: |
          kubectl get events -n "${PROJECT_NAME}" > events.log
          kubectl describe pods > pods.log
          kubectl get pods -n "${PROJECT_NAME}" --output json | jq -r '.items[].metadata.name' | while read pod; do
             kubectl logs --all-containers "${pod}" -n "${PROJECT_NAME}" > "${pod}.log"
          done

      - name: Store OpenShift logs as artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: openshift-logs
          path: '*.log'

      - name: Clean up After Test
        if: ${{ always() }}
        run: |
          helm uninstall "${PROJECT_NAME}" --timeout 30s
          oc delete project "${PROJECT_NAME}"
