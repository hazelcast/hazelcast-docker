name: Build EE NLC image

on:
  workflow_dispatch:
    inputs:
      SOURCE_REF:
        description: 'The hazelcast-docker branch to build the image from'
        required: true
      DRY_RUN:
        description: 'Skip pushing the images to remote registry'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      HZ_REVISION:
        description: 'Commit id of Hazelcast snapshot jar'
        required: false
      ENVIRONMENT:
        description: 'Environment to use'
        required: true
        type: environment
  workflow_call:
    inputs:
      SOURCE_REF:
        description: 'The hazelcast-docker branch to build the image from'
        required: true
        type: string
      DRY_RUN:
        description: 'Skip pushing the images to remote registry'
        required: false
        default: 'false'
        type: string
      HZ_REVISION:
        description: 'Commit id of Hazelcast snapshot jar'
        required: false
        type: string
      ENVIRONMENT:
        description: 'Environment to use'
        required: true
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      HZ_VERSION: ${{ steps.get_hz_versions.outputs.HZ_VERSION }}
      jdks: ${{ steps.jdks.outputs.jdks }}
      default-jdk: ${{ steps.jdks.outputs.default-jdk }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.SOURCE_REF }}

      - name: Get HZ versions
        id: get_hz_versions
        uses: hazelcast/docker-actions/get-hz-versions@master

      - name: Get supported JDKs
        id: jdks
        uses: hazelcast/docker-actions/get-supported-jdks@master
        with:
          HZ_VERSION: '${{ steps.get_hz_versions.outputs.HZ_VERSION }}'

  push:
    environment: ${{ inputs.ENVIRONMENT }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        jdk: ${{ fromJSON(needs.prepare.outputs.jdks) }}
    env:
      LOCAL_REGISTRY: localhost:5000
      HZ_VERSION: ${{ needs.prepare.outputs.HZ_VERSION }}
      DOCKER_DIR: source_path/hazelcast-enterprise
      TEST_CONTAINER_NAME: hazelcast-test
    services:
      registry:
        image: registry:latest
        ports:
          - 5000:5000
    steps:
      - uses: actions/checkout@v5

      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.SOURCE_REF }}
          path: source_path

      - name: Setup Docker
        uses: ./.github/actions/setup-docker

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Get dist ZIP
        run: |
          if [[ "${HZ_VERSION}" =~ SNAPSHOT ]]
          then  
            subdir=/snapshot
          else
            subdir=
          fi

          S3_NLC_ZIP_URL=${{ secrets.S3_NLC_URL }}${subdir}/hazelcast-enterprise-${HZ_VERSION}-nlc.zip
          aws s3 cp "${S3_NLC_ZIP_URL}" ${DOCKER_DIR}/hazelcast-enterprise-distribution.zip

      - name: Calculate tags
        id: tags
        run: |
          . .github/scripts/get-tags-to-push.sh

          LOCAL_IMAGE_NAME=${LOCAL_REGISTRY}/${{ secrets.NLC_IMAGE_NAME }}
          echo "LOCAL_IMAGE_NAME=${LOCAL_IMAGE_NAME}" >> ${GITHUB_ENV}

          TAGS_TO_PUSH=$(augment_with_suffixed_tags "${HZ_VERSION}" "" "${{ matrix.jdk }}" "${{ jobs.prepare.outputs.default-jdk }}")

          # Keep a reference to _a_ tag to get the image later on
          echo "PRIMARY_TAG=${TAGS_TO_PUSH%% *}" >> ${GITHUB_ENV}
          TAGS_ARG=""
          {
            echo 'tags<<EOF'
            for tag in ${TAGS_TO_PUSH[@]}; do
              echo "${LOCAL_IMAGE_NAME}:${tag}"
            done
            echo 'EOF'
          } >> "${GITHUB_OUTPUT}"

      - name: Calculate platforms
        id: platforms
        run: |
          . .github/scripts/docker.functions.sh

          echo "platforms=$(get_ubi_supported_platforms ${{ matrix.jdk }})" >> ${GITHUB_OUTPUT}

      - name: Determine labels
        id: labels
        if: ${{ inputs.HZ_REVISION != '' }}
        run: |
          echo "label=hazelcast.revision=${{ inputs.HZ_REVISION }}" >> "$GITHUB_OUTPUT"

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.DOCKER_DIR }}
          labels: ${{ steps.labels.outputs.label }}
          platforms: ${{ steps.platforms.outputs.platforms }}
          push: true
          tags: ${{ steps.tags.outputs.TAGS }}
          build-args: |
            JDK_VERSION=${{ matrix.jdk }}

      - name: Run smoke test against image
        timeout-minutes: 2
        run: |
          .github/scripts/simple-smoke-test.sh ${LOCAL_IMAGE_NAME}:${PRIMARY_TAG} "${TEST_CONTAINER_NAME}" ee "${HZ_VERSION}" "${{ matrix.jdk }}"
        env:
          HZ_INSTANCETRACKING_FILENAME: instance-tracking.txt

      - name: Get docker logs
        if: ${{ always() }}
        run: |
          docker logs "${TEST_CONTAINER_NAME}" > "docker-${TEST_CONTAINER_NAME}-jdk${{ matrix.jdk }}.log" || true

      - name: Store docker logs as artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs-tag-image-push-nlc-${{ env.HZ_VERSION }}-jdk${{ matrix.jdk }}
          path: docker-*.log

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_INFRA_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_INFRA_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            NLC/IMAGE_REGISTRY
            SLACK_WEBHOOK,SLACK/WEBHOOK_HAZELCAST_DOCKER_NOTIFICATIONS
          parse-json-secrets: true

      - name: Login to NLC registry
        if: inputs.DRY_RUN != 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.NLC_IMAGE_REGISTRY_URL }}
          username: ${{ env.NLC_IMAGE_REGISTRY_USERNAME }}
          password: ${{ env.NLC_IMAGE_REGISTRY_TOKEN }}

      - name: Push image to remote registry
        if: inputs.DRY_RUN != 'true'
        run: |
          # Skopeo expects HTTPS registry but local is HTTP
          skopeo sync \
            --all \
            --src-tls-verify=false \
            --src docker \
            --dest docker \
            ${LOCAL_IMAGE_NAME} \
            ${{ secrets.NLC_REPOSITORY }}/${{ vars.NLC_NAMESPACE }}

      - name: Check RedHat service status
        if: failure()
        uses: hazelcast/docker-actions/check-redhat-service-status@master

      - name: Slack notification
        uses: hazelcast/docker-actions/slack-notification@master
        if: failure() && github.triggering_actor == 'devOpsHazelcast'
        with:
          slack-webhook-url: ${{ env.SLACK_WEBHOOK }}
