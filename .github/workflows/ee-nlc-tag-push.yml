name: Build EE NLC image

on:
  workflow_dispatch:
    inputs:
      SOURCE_REF:
        description: 'The hazelcast-docker branch to build the image from'
        required: true
      DRY_RUN:
        description: 'Skip pushing the images to remote registry'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      HZ_REVISION:
        description: 'Commit id of Hazelcast snapshot jar'
        required: false
  workflow_call:
    inputs:
      SOURCE_REF:
        description: 'The hazelcast-docker branch to build the image from'
        required: true
        type: string
      DRY_RUN:
        description: 'Skip pushing the images to remote registry'
        required: false
        default: 'false'
        type: string
      HZ_REVISION:
        description: 'Commit id of Hazelcast snapshot jar'
        required: false
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      HZ_VERSION: ${{ steps.get_hz_versions.outputs.HZ_VERSION }}
      jdks: ${{ steps.jdks.outputs.jdks }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.SOURCE_REF }}

      - name: Get HZ versions
        id: get_hz_versions
        uses: hazelcast/docker-actions/get-hz-versions@master

      - name: Get supported JDKs
        id: jdks
        uses: hazelcast/docker-actions/get-supported-jdks@master
        with:
          HZ_VERSION: '${{ steps.get_hz_versions.outputs.HZ_VERSION }}'

  push:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        jdk: ${{ fromJSON(needs.prepare.outputs.jdks) }}
    env:
      LOCAL_REGISTRY: localhost:5000
      HZ_VERSION: ${{ needs.prepare.outputs.HZ_VERSION }}
      DOCKER_DIR: source_path/hazelcast-enterprise
      TEST_CONTAINER_NAME: hazelcast-test
    services:
      registry:
        image: registry:latest
        ports:
          - 5000:5000
    steps:
      - uses: actions/checkout@v5

      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.SOURCE_REF }}
          path: source_path

      - name: Setup Docker
        uses: ./.github/actions/setup-docker

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Get dist ZIP URL
        run: |
          if [[ "${HZ_VERSION}" =~ SNAPSHOT ]]
          then  
            subdir=/snapshot
          else
            subdir=
          fi

          S3_NLC_ZIP_URL=${{ secrets.S3_NLC_URL }}${subdir}/hazelcast-enterprise-${HZ_VERSION}-nlc.zip

          echo "HAZELCAST_ZIP_URL=$(aws s3 presign "${S3_NLC_ZIP_URL}" --expires-in 600)" >> ${GITHUB_ENV}

      - name: Build and Push image to local registry
        run: |
          . .github/scripts/get-tags-to-push.sh
          . .github/scripts/docker.functions.sh

          LOCAL_IMAGE_NAME=${LOCAL_REGISTRY}/${{ secrets.NLC_IMAGE_NAME }}
          echo "LOCAL_IMAGE_NAME=${LOCAL_IMAGE_NAME}" >> ${GITHUB_ENV}

          DEFAULT_JDK="$(get_default_jdk ${DOCKER_DIR})"

          TAGS_TO_PUSH=$(augment_with_suffixed_tags "${HZ_VERSION}" "" "${{ matrix.jdk }}" "${DEFAULT_JDK}")
          echo "TAGS_TO_PUSH=${TAGS_TO_PUSH}"
          TAGS_ARG=""
          for tag in ${TAGS_TO_PUSH[@]}
          do
            echo "TAG=${tag}" >> ${GITHUB_ENV}
            TAGS_ARG="${TAGS_ARG} --tag ${LOCAL_IMAGE_NAME}:${tag}"
          done
          PLATFORMS="$(get_ubi_supported_platforms "${{ matrix.jdk }}")"

          if [ -n "${{ inputs.HZ_REVISION }}" ]; then
            LABEL_ARG="--label hazelcast.revision=${{ inputs.HZ_REVISION }}"
          else
            LABEL_ARG=""
          fi

          docker buildx build --push \
            --build-arg JDK_VERSION=${{ matrix.jdk }} \
            --build-arg HAZELCAST_ZIP_URL=${HAZELCAST_ZIP_URL} \
            ${TAGS_ARG} \
            ${LABEL_ARG} \
            --platform=${PLATFORMS} "${DOCKER_DIR}"

      - name: Run smoke test against image
        timeout-minutes: 2
        run: |
          .github/scripts/simple-smoke-test.sh ${LOCAL_IMAGE_NAME}:${TAG} "${TEST_CONTAINER_NAME}" ee "${HZ_VERSION}" "${{ matrix.jdk }}"
        env:
          HZ_INSTANCETRACKING_FILENAME: instance-tracking.txt

      - name: Get docker logs
        if: ${{ always() }}
        run: |
          docker logs "${TEST_CONTAINER_NAME}" > "docker-${TEST_CONTAINER_NAME}-jdk${{ matrix.jdk }}.log" || true

      - name: Store docker logs as artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs-tag-image-push-nlc-${{ env.HZ_VERSION }}-jdk${{ matrix.jdk }}
          path: docker-*.log

      - name: Login to NLC registry
        if: inputs.DRY_RUN != 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NLC_REPOSITORY }}
          username: ${{ secrets.NLC_REPO_USERNAME }}
          password: ${{ secrets.NLC_REPO_TOKEN }}

      - name: Push image to remote registry
        if: inputs.DRY_RUN != 'true'
        run: |
          remote_registry=${{ secrets.NLC_REPOSITORY }}/hazelcast_cloud/${{ secrets.NLC_IMAGE_NAME }}
          # Extract the registry from the fully-qualified destination
          remote_registry="${remote_registry%/*}"

          # Skopeo expects HTTPS registry but local is HTTP
          skopeo sync \
            --all \
            --src-tls-verify=false \
            --src docker \
            --dest docker \
            ${LOCAL_IMAGE_NAME} \
            ${remote_registry}

      - name: Check RedHat service status
        if: failure()
        uses: hazelcast/docker-actions/check-redhat-service-status@master

      - name: Slack notification
        uses: hazelcast/docker-actions/slack-notification@master
        if: failure() && github.triggering_actor == 'devOpsHazelcast'
        with:
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK }}
