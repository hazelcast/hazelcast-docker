name: Check base images

on:
  workflow_dispatch:
    inputs:
      MINIMAL_SUPPORTED_VERSION:
        description: 'Minimal supported version from which we should start checking images, e.g. 5.1.1, 5.0.1, 4.2.3. Default values is 4.2'
        required: true

jobs:
  get-supported-versions:
    runs-on: ubuntu-latest
    name: Get supported versions
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      MINIMAL_SUPPORTED_VERSION: ${{ github.event.inputs.MINIMAL_SUPPORTED_VERSION }}
      DEFAULT_MINIMAL_SUPPORTED_VERSION: 4.2
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: set-matrix
        name: Get supported versions
        run: |
          . .github/scripts/get-supported-versions.sh
          versions=$(get_supported_versions "${MINIMAL_SUPPORTED_VERSION:-$DEFAULT_MINIMAL_SUPPORTED_VERSION}" | jq -R . | jq -c -s .)
          echo "Found supported versions: $versions"
          echo "matrix={\"version\":$versions}" >> $GITHUB_OUTPUT

  trigger-rebuilds:
    runs-on: ubuntu-latest
    name: Rebuild ${{ matrix.version }} HZ OSS if base image changed
    needs: get-supported-versions
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.get-supported-versions.outputs.matrix) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Checkout version ${{ matrix.version }}
        uses: actions/checkout@v3
        with:
          ref: v${{ matrix.version }}
          path: v${{ matrix.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check if ${{ matrix.version }} base images updated
        run: |
          . .github/scripts/base-image-updated.sh
          . .github/scripts/log.functions.sh
          echo "Checking OSS ${{ matrix.version }} image"
          if base_image_updated hazelcast/hazelcast:${{ matrix.version }} v${{ matrix.version }}/hazelcast-oss/Dockerfile; then
            echo "OSS_NEEDS_REBUILD=yes" >> $GITHUB_ENV
            log_info "Image OSS ${{ matrix.version }} needs rebuild"
          else
            echo "OSS_NEEDS_REBUILD=no" >> $GITHUB_ENV
            log_info "Image OSS ${{ matrix.version }} is up-to-date"
          fi
          echo "Checking EE ${{ matrix.version }} image"
          if base_image_updated hazelcast/hazelcast-enterprise:${{ matrix.version }} v${{ matrix.version }}/hazelcast-enterprise/Dockerfile; then 
            echo "EE_NEEDS_REBUILD=yes" >> $GITHUB_ENV
            log_info "Image EE ${{ matrix.version }} needs rebuild"
          else
            echo "EE_NEEDS_REBUILD=no" >> $GITHUB_ENV
            log_info "Image EE ${{ matrix.version }} is up-to-date"
          fi
      - name: Rebuild ${{ matrix.version }} OSS image
        if: env.OSS_NEEDS_REBUILD == 'yes'
        run: |
          . .github/scripts/log.functions.sh
          if cat v${{ matrix.version }}/.github/workflows/tag_image_push.yml | grep -q "EDITIONS:"; then 
            echo "EDITIONS flag supported, rebuilding only OSS image"
            EXTRA_FLAGS="-f EDITIONS=OSS"
          else
            log_warn "EDITIONS flag NOT supported, rebuilding OSS and EE images"
          fi
          gh workflow run tag_image_push.yml --ref v${{ matrix.version }} -f HZ_VERSION=${{ matrix.version }} ${EXTRA_FLAGS}
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Rebuild ${{ matrix.version }} EE image
        if: env.EE_NEEDS_REBUILD == 'yes'
        run: |
          . .github/scripts/log.functions.sh
          if cat v${{ matrix.version }}/.github/workflows/tag_image_push.yml | grep -q "EDITIONS:"; then 
          echo "EDITIONS flag supported, rebuilding only EE image"
            EXTRA_FLAGS="-f EDITIONS=EE"
          else
            log_warn "EDITIONS flag NOT supported, rebuilding OSS and EE images"
          fi
          gh workflow run tag_image_push.yml --ref v${{ matrix.version }} -f HZ_VERSION=${{ matrix.version }} ${EXTRA_FLAGS}
          gh workflow run tag_image_push_rhel.yml --ref v${{ matrix.version }} -f HZ_VERSION=${{ matrix.version }}
        env:
          GH_TOKEN: ${{ github.token }}
