name: Test Secrets

on:
  pull_request:

jobs:
  compare-strings:
    runs-on: ubuntu-latest
    env:
      REQUIRED_HZ_MAJOR_VERSION: 5
      OCP_LOGIN_USERNAME: ${{ secrets.OCP_LOGIN_USERNAME }}
      OCP_LOGIN_PASSWORD: ${{ secrets.OCP_LOGIN_PASSWORD }}
      OCP_CLUSTER_URL: ${{ secrets.OCP_CLUSTER_URL }}
      RHEL_API_KEY: ${{ secrets.RHEL_API_KEY }}

    steps:
      - name: Set scan registry secrets
        run: |
          echo "SCAN_REGISTRY_USER=${{ secrets[format('SCAN_REGISTRY_USER_V{0}', env.REQUIRED_HZ_MAJOR_VERSION)] }}" >> $GITHUB_ENV
          echo "SCAN_REGISTRY_PASSWORD=${{ secrets[format('SCAN_REGISTRY_PASSWORD_V{0}', env.REQUIRED_HZ_MAJOR_VERSION)] }}" >> $GITHUB_ENV
          echo "RHEL_PROJECT_ID=${{ secrets[format('RHEL_PROJECT_ID_V{0}', env.REQUIRED_HZ_MAJOR_VERSION)] }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            OCP_LOGIN_USERNAME_AWS,CN/OCP_USERNAME
            OCP_LOGIN_PASSWORD_AWS,CN/OCP_PASSWORD
            OCP_CLUSTER_URL_AWS,CN/OCP_CLUSTER_URL
            RHEL_API_KEY_AWS,CN/PREFLIGHT_RHEL_API_KEY
            SCAN_REGISTRY_USER_AWS,SCAN_REGISTRY_USER_V${{ env.REQUIRED_HZ_MAJOR_VERSION }}
            SCAN_REGISTRY_PASSWORD_AWS,SCAN_REGISTRY_PASSWORD_V${{ env.REQUIRED_HZ_MAJOR_VERSION }}
            RHEL_PROJECT_ID_AWS,RHEL_PROJECT_ID_V${{ env.REQUIRED_HZ_MAJOR_VERSION }}

      - name: Compare multiple string pairs
        run: |
          if [[ ! "$OCP_LOGIN_USERNAME" ]]; then
              echo OCP_LOGIN_USERNAME empty!
          elif [ "$OCP_LOGIN_USERNAME" = "$OCP_LOGIN_USERNAME_AWS" ]; then
              echo "OCP_LOGIN_USERNAME validated"
          else
              echo "OCP_LOGIN_USERNAME unmatched!"
          fi

          if [[ ! "$OCP_LOGIN_PASSWORD" ]]; then
              echo OCP_LOGIN_PASSWORD empty!
          elif [ "$OCP_LOGIN_PASSWORD" = "$OCP_LOGIN_PASSWORD_AWS" ]; then
              echo "OCP_LOGIN_PASSWORD validated"
          else
              echo "OCP_LOGIN_PASSWORD unmatched!"
          fi

          if [[ ! "$OCP_CLUSTER_URL" ]]; then
              echo OCP_CLUSTER_URL empty!
          elif [ "$OCP_CLUSTER_URL" = "$OCP_CLUSTER_URL_AWS" ]; then
              echo "OCP_CLUSTER_URL validated"
          else
              echo "OCP_CLUSTER_URL unmatched!"
          fi

          if [[ ! "$RHEL_API_KEY" ]]; then
              echo RHEL_API_KEY empty!
          elif [ "$RHEL_API_KEY" = "$RHEL_API_KEY_AWS" ]; then
              echo "RHEL_API_KEY validated"
          else
              echo "RHEL_API_KEY unmatched!"
          fi
          
          if [[ ! "$SCAN_REGISTRY_USER" ]]; then
              echo SCAN_REGISTRY_USER empty!
          elif [ "$SCAN_REGISTRY_USER" = "$SCAN_REGISTRY_USER_AWS" ]; then
              echo "SCAN_REGISTRY_USER validated"
          else
              echo "SCAN_REGISTRY_USER unmatched!"
          fi

          if [[ ! "$SCAN_REGISTRY_PASSWORD" ]]; then
              echo SCAN_REGISTRY_PASSWORD empty!
          elif [ "$SCAN_REGISTRY_PASSWORD" = "$SCAN_REGISTRY_PASSWORD_AWS" ]; then
              echo "SCAN_REGISTRY_PASSWORD validated"
          else
              echo "SCAN_REGISTRY_PASSWORD unmatched!"
          fi

          if [[ ! "$RHEL_PROJECT_ID" ]]; then
              echo RHEL_PROJECT_ID empty!
          elif [ "$RHEL_PROJECT_ID" = "$RHEL_PROJECT_ID_AWS" ]; then
              echo "RHEL_PROJECT_ID validated"
          else
              echo "RHEL_PROJECT_ID unmatched!"
          fi

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
            status: custom
            fields: workflow,job,commit,repo,ref,author,took
            channel: "@U05DK2H5RN2"
            custom_payload: |
              {
                attachments: [{
                  text: `This is a test - ${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
                }]
              }
        env:
            webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
