name: Build OS and EE image

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set Release Version
        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV

      - name: Check if latest tag should be pushed
        run: echo "PUSH_LATEST=$([[ $(git tag --list "v*" | sort | tail -n 1) = "${GITHUB_REF:10}" ]] && echo yes || echo no)" >> $GITHUB_ENV

      - name: Print Push Latest
        run: |
          echo ${{ env.PUSH_LATEST }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.0.1

      - name:  Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.1.1
        with:
          version: v0.5.1

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build/Push OSS image
        run: |
          if [[ "${{ env.PUSH_LATEST }}" == "yes" ]]; then
            docker buildx build --push \
              --build-arg HZ_VERSION=${{env.RELEASE_VERSION }} \
              --tag hazelcast/hazelcast:${{ env.RELEASE_VERSION }} \
              --tag hazelcast/hazelcast:latest \
              --platform=linux/arm64,linux/amd64,linux/ppc64le,linux/s390x hazelcast-oss
          else
            docker buildx build --push \
              --build-arg HZ_VERSION=${{ env.RELEASE_VERSION }} \
              --tag hazelcast/hazelcast:${{ env.RELEASE_VERSION }} \
              --platform=linux/arm64,linux/amd64,linux/ppc64le,linux/s390x hazelcast-oss
          fi

      - name: Build/Push EE image
        run: |
          if [[ "${{ env.PUSH_LATEST }}" == "yes" ]]; then
            docker buildx build --push \
              --build-arg HZ_VERSION=${{ env.RELEASE_VERSION }} \
              --tag hazelcast/hazelcast-enterprise:${{ env.RELEASE_VERSION }} \
              --tag hazelcast/hazelcast-enterprise:latest \
              --platform=linux/arm64,linux/amd64,linux/ppc64le,linux/s390x hazelcast-enterprise 
          else
            docker buildx build --push \
              --build-arg HZ_VERSION=${{ env.RELEASE_VERSION }} \
              --tag hazelcast/hazelcast-enterprise:${{ env.RELEASE_VERSION }} \
              --platform=linux/arm64,linux/amd64,linux/ppc64le,linux/s390x hazelcast-enterprise
          fi

      - name: Scan Hazelcast image by Azure (Trivy + Dockle)
        if: always()
        uses: Azure/container-scan@v0
        with:
          image-name: hazelcast/hazelcast:${{ env.RELEASE_VERSION }}

      - name: Scan Hazelcast image by Anchore
        if: always()
        uses: anchore/scan-action@v2.0.2
        with:
          image: hazelcast/hazelcast:${{ env.RELEASE_VERSION }}
          fail-build: true

      - name: Scan Hazelcast image by Snyk
        if: always()
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: hazelcast/hazelcast:${{ env.RELEASE_VERSION }}
          args: --file=hazelcast-oss/Dockerfile --policy-path=.github/containerscan

      - name: Scan Hazelcast Enterprise image by Azure (Trivy + Dockle)
        if: always()
        uses: Azure/container-scan@v0
        with:
          image-name: hazelcast/hazelcast-enterprise:${{ env.RELEASE_VERSION }}

      - name: Scan Hazelcast Enterprise image by Anchore
        if: always()
        uses: anchore/scan-action@v2.0.2
        with:
          image: hazelcast/hazelcast-enterprise:${{ env.RELEASE_VERSION }}
          fail-build: true

      - name: Scan Hazelcast Enterprise image by Snyk
        if: always()
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: hazelcast/hazelcast-enterprise:${{ env.RELEASE_VERSION }}
          args: --file=hazelcast-enterprise/Dockerfile --policy-path=.github/containerscan
