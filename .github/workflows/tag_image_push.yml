name: Build OS and EE image

on:
  workflow_dispatch:
    inputs:
      SOURCE_REF:
        description: 'The hazelcast-docker branch to build the image from'
        required: true
      RELEASE_TYPE:
        description: 'What should be built'
        required: false
        default: 'EE'
        type: choice
        options:
          - ALL
          - OSS
          - EE
      IS_LTS_OVERRIDE:
        description: 'Override is LTS release'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - 'false'
          - 'true'
      DRY_RUN:
        description: 'Skip pushing the images to remote registry'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
  workflow_call:
    inputs:
      SOURCE_REF:
        description: 'The hazelcast-docker branch to build the image from'
        required: true
        type: string
      RELEASE_TYPE:
        description: 'What should be built'
        required: false
        default: 'EE'
        type: string
      IS_LTS_OVERRIDE:
        description: 'Override is LTS release'
        required: false
        default: ''
        type: string
      DRY_RUN:
        description: 'Skip pushing the images to remote registry'
        required: false
        default: 'false'
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    env:
      RELEASE_TYPE: ${{ inputs.RELEASE_TYPE }}
    outputs:
      distribution-types: ${{ steps.distribution-type-matrix.outputs.matrix }}
      HZ_VERSION: ${{ steps.get_hz_versions.outputs.HZ_VERSION_EE }}
      jdks: ${{ steps.jdks.outputs.jdks }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.SOURCE_REF }}

      - name: Read release type from the file
        run: |
          RELEASE_TYPE_FILE=.github/release_type
          if [ -f $RELEASE_TYPE_FILE ]; then
              echo "RELEASE_TYPE=$(cat $RELEASE_TYPE_FILE)" >> $GITHUB_ENV
          fi

      - id: resolve-editions
        uses: hazelcast/docker-actions/resolve-editions@master
        with:
          release-type: ${{ env.RELEASE_TYPE }}

      - name: Get HZ versions
        id: get_hz_versions
        uses: hazelcast/docker-actions/get-hz-versions@master

      - name: Get supported JDKs
        id: jdks
        uses: hazelcast/docker-actions/get-supported-jdks@master
        with:
          HZ_VERSION: '${{ steps.get_hz_versions.outputs.HZ_VERSION_EE }}'

      - name: Compute distribution type matrix
        id: distribution-type-matrix
        run: |
          # We expect at least _one_ output distribution type, otherwise will produce an empty array that will break GitHub matrixes
          entries=()

          if [ "${{ steps.resolve-editions.outputs.should_build_oss }}" = "yes" ]; then
            entries+=('{"label":"oss","docker-dir":"source_path/hazelcast-oss","image-name":"hazelcast","build-functions-script-path":".github/scripts/oss-build.functions.sh"}')
          fi
          if [ "${{ steps.resolve-editions.outputs.should_build_ee }}" = "yes" ]; then
            entries+=('{"label":"ee","docker-dir":"source_path/hazelcast-enterprise","image-name":"hazelcast-enterprise","build-functions-script-path":".github/scripts/ee-build.functions.sh"}')
          fi

          json="[$(IFS=,; echo "${entries[*]}")]"
          echo "matrix=$json" >> "${GITHUB_OUTPUT}"

  distribution-variants:
    uses: hazelcast/hazelcast-docker/.github/workflows/get-distribution-variants.yaml@master

  push:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - distribution-variants
    strategy:
      matrix:
        jdk: ${{ fromJSON(needs.prepare.outputs.jdks) }}
        variant: ${{ fromJSON(needs.distribution-variants.outputs.variants) }}
        distribution-type: ${{ fromJSON(needs.prepare.outputs.distribution-types) }}
    env:
      DOCKER_ORG: hazelcast
      HZ_VERSION: ${{ needs.prepare.outputs.HZ_VERSION }}
      TEST_CONTAINER_NAME: hazelcast-test
      TEST_IMAGE_NAME: hazelcast:test
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.SOURCE_REF }}
          path: source_path

      - name: Setup Docker
        uses: ./.github/actions/setup-docker

      - name: Login to Docker Hub
        if: inputs.DRY_RUN != 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get dist ZIP URL
        run: |
          . ${{ matrix.distribution-type.build-functions-script-path }}
          echo "HAZELCAST_ZIP_URL=$(get_hz_dist_zip "${{ matrix.variant.classifier }}" "${{ env.HZ_VERSION }}")" >> ${GITHUB_ENV}

      - name: Build Test image
        run: |
          . ${{ matrix.distribution-type.build-functions-script-path }}

          docker buildx build --load \
            --build-arg JDK_VERSION=${{ matrix.jdk }} \
            --build-arg HAZELCAST_ZIP_URL=$HAZELCAST_ZIP_URL \
            --tag ${TEST_IMAGE_NAME} \
            ${{ matrix.distribution-type.docker-dir }}

      - name: Run smoke test against image
        timeout-minutes: 2
        run: |
          .github/scripts/simple-smoke-test.sh ${TEST_IMAGE_NAME} "${{ env.TEST_CONTAINER_NAME }}" ${{ matrix.distribution-type.label }} "${{ env.HZ_VERSION }}" "${{ matrix.jdk }}"
        env:
          HZ_LICENSEKEY: ${{ matrix.distribution-type.label == 'ee' && secrets.HZ_ENTERPRISE_LICENSE || '' }}

      - name: Get docker logs
        if: ${{ always() }}
        run: |
          docker logs "${{ env.TEST_CONTAINER_NAME }}" > "docker-${{ env.TEST_CONTAINER_NAME }}${{ matrix.variant.suffix }}-jdk${{ matrix.jdk }}.log" || true

      - name: Store docker logs as artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs-${{ matrix.distribution-type.label }}${{ matrix.variant.suffix }}-${{ github.job }}-jdk${{ matrix.jdk }}
          path: docker-*.log

      - name: Check if latest EE LTS release
        if: matrix.distribution-type.label == 'ee'
        id: is_latest_lts
        uses: ./.github/actions/check-if-latest-lts-release
        with:
          hz_version: ${{ env.HZ_VERSION }}
          is_lts_override: ${{ inputs.IS_LTS_OVERRIDE }}

      - name: Build and Push image
        run: |
          . .github/scripts/logging.functions.sh
          . .github/scripts/get-tags-to-push.sh
          . .github/scripts/docker.functions.sh
          . ${{ matrix.distribution-type.build-functions-script-path }}

          IMAGE_NAME=${{ env.DOCKER_ORG }}/${{ matrix.distribution-type.image-name }}
          DEFAULT_JDK="$(get_default_jdk ${{ matrix.distribution-type.docker-dir }})"

          if [ "${{ matrix.distribution-type.label }}" = "oss" ]; then
            # OSS has no LTS releases
            IS_LATEST_LTS=false
          elif [ "${{ matrix.distribution-type.label }}" = "ee" ]; then
            IS_LATEST_LTS="${{ steps.is_latest_lts.outputs.is_latest_lts }}"
          fi

          TAGS_TO_PUSH=$(get_tags_to_push "${{ env.HZ_VERSION }}" "${{ matrix.variant.suffix }}" "${{ matrix.jdk }}" "${DEFAULT_JDK}" "${IS_LATEST_LTS}")
          echodebug "TAGS_TO_PUSH=${TAGS_TO_PUSH}"
          TAGS_ARG=""
          for tag in ${TAGS_TO_PUSH[@]}
          do
            TAGS_ARG="${TAGS_ARG} --tag ${IMAGE_NAME}:${tag}"
          done

          output=

          if [ "${{ matrix.distribution-type.label }}" = "oss" ]; then
            PLATFORMS="$(get_alpine_supported_platforms "${{ matrix.jdk }}")"
          elif [ "${{ matrix.distribution-type.label }}" = "ee" ]; then
            PLATFORMS="$(get_ubi_supported_platforms "${{ matrix.jdk }}")"
          fi
          

          if [ "${{ inputs.DRY_RUN }}" == "true" ] ; then
            echodebug "DRY RUN: Skipping push for platforms ${PLATFORMS} and tags: ${TAGS_TO_PUSH}"
          else
            output=--push
          fi

          docker buildx build ${output} \
            --build-arg JDK_VERSION=${{ matrix.jdk }} \
            --build-arg HAZELCAST_ZIP_URL=${HAZELCAST_ZIP_URL} \
            ${TAGS_ARG} \
            --platform=${PLATFORMS} "${{ matrix.distribution-type.docker-dir }}"

  create-release:
    needs: push
    if: inputs.DRY_RUN != 'true' && (needs.prepare.outputs.should_build_ee == 'yes' || needs.prepare.outputs.should_build_oss == 'yes')
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        if: inputs.DRY_RUN != 'true'
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          tag: ${{ inputs.SOURCE_REF }}

  readme:
    needs: push
    if: inputs.DRY_RUN != 'true'
    uses: ./.github/workflows/update_readme.yml
    secrets: inherit

  failure-notifications:
    runs-on: ubuntu-latest
    name: Failure notification
    if: failure() && github.triggering_actor == 'devOpsHazelcast'
    needs: readme
    steps:
      - name: Slack notification
        uses: hazelcast/docker-actions/slack-notification@master
        with:
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK }}
