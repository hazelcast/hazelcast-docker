name: Build EE RHEL image

on:
  push:
    branches:
      - "!*"
    tags:
      - "v4.*"
      - "v5.*"
  workflow_dispatch:
    inputs:
      HZ_VERSION:
        description: 'Version of Hazelcast to build the image for, e.g. 5.1.1, 5.0.1, 4.2.3'
        required: true
      RELEASE_VERSION:
        description: 'Version of the docker image e.g. 5.1.1, 5.1.1-1, defaults to HZ_VERSION'
        required: false
jobs:
  jdks:
    uses: ./.github/workflows/get-supported-jdks.yaml

  build:
    env:
      REQUIRED_HZ_MAJOR_VERSION: 5
      SCAN_REGISTRY: "quay.io"
      TIMEOUT_IN_MINS: 240
      RHEL_API_KEY: ${{ secrets.RHEL_API_KEY }}
      HZ_VERSION: ${{ inputs.HZ_VERSION }}
      RELEASE_VERSION: ${{ inputs.RELEASE_VERSION }}

    # Deliberately use a faster instance to avoid timeouts during smoke test
    runs-on: ubicloud-standard-4
    needs: jdks
    strategy:
      fail-fast: false
      matrix:
        jdk: ${{ fromJSON(needs.jdks.outputs.jdks) }}
    steps:
      - name: Set HZ version as environment variable
        run: |
          if [ -z "${{ env.HZ_VERSION }}" ]; then
             HZ_VERSION=${GITHUB_REF:11}
          else
             HZ_VERSION=${{ env.HZ_VERSION }}
          fi
          echo "HZ_VERSION=${HZ_VERSION}" >> $GITHUB_ENV

      - name: Set Release version as environment variable
        run: |
          if [ -z "${{ env.RELEASE_VERSION }}" ]; then
             RELEASE_VERSION=${HZ_VERSION}
          else
             RELEASE_VERSION=${{ env.RELEASE_VERSION }}
          fi
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Check HZ major version
        run: |
          HZ_MAJOR_VERSION=$(echo "${HZ_VERSION:0:1}")
          if [[ "$HZ_MAJOR_VERSION" != "$REQUIRED_HZ_MAJOR_VERSION" ]]; then
            echo "Major version must be ${REQUIRED_HZ_MAJOR_VERSION} but detected: ${HZ_MAJOR_VERSION}"
            exit 1
          fi
          echo "HZ_MAJOR_VERSION=${HZ_MAJOR_VERSION}" >> $GITHUB_ENV

      - name: Set scan registry secrets
        run: |
          echo "SCAN_REGISTRY_USER=${{ secrets[format('SCAN_REGISTRY_USER_V{0}', env.REQUIRED_HZ_MAJOR_VERSION)] }}" >> $GITHUB_ENV
          echo "SCAN_REGISTRY_PASSWORD=${{ secrets[format('SCAN_REGISTRY_PASSWORD_V{0}', env.REQUIRED_HZ_MAJOR_VERSION)] }}" >> $GITHUB_ENV
          echo "RHEL_PROJECT_ID=${{ secrets[format('RHEL_PROJECT_ID_V{0}', env.REQUIRED_HZ_MAJOR_VERSION)] }}" >> $GITHUB_ENV

      - name: Checkout to Management Center Openshift
        uses: actions/checkout@v3
        with:
          repository: hazelcast/management-center-openshift
          path: management-center-openshift
          fetch-depth: 0

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set RHEL image as environment variable
        run: |
          SCAN_REPOSITORY=${SCAN_REGISTRY}/redhat-isv-containers/${RHEL_PROJECT_ID}
          echo "SCAN_REPOSITORY=${SCAN_REPOSITORY}" >> $GITHUB_ENV
          echo "RHEL_IMAGE=${SCAN_REPOSITORY}:${RELEASE_VERSION}-jdk${{ matrix.jdk }}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0

      - name:  Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.5.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            OCP_LOGIN_USERNAME,CN/OCP_USERNAME
            OCP_LOGIN_PASSWORD,CN/OCP_PASSWORD
            OCP_CLUSTER_URL,CN/OCP_CLUSTER_URL

      - name: Log in to Red Hat Scan Registry
        run: |
          docker login ${SCAN_REGISTRY} -u ${SCAN_REGISTRY_USER} -p ${SCAN_REGISTRY_PASSWORD}

      - name: Build the Hazelcast Enterprise image
        run: |
          . .github/scripts/get-tags-to-push.sh 
          . .github/scripts/docker.functions.sh
          . .github/scripts/ee-build.functions.sh

          DOCKER_DIR=hazelcast-enterprise
          IMAGE_NAME=${SCAN_REPOSITORY}
          DEFAULT_JDK="$(get_default_jdk $DOCKER_DIR)"

          TAGS_TO_PUSH=$(get_tags_to_push ${{ env.RELEASE_VERSION }} "" "${{ matrix.jdk }}" "$DEFAULT_JDK")
          echo "TAGS_TO_PUSH=$TAGS_TO_PUSH"
          TAGS_ARG=""
          for tag in ${TAGS_TO_PUSH[@]}
          do
            TAGS_ARG="${TAGS_ARG} --tag ${IMAGE_NAME}:${tag}"
          done

          PLATFORMS="linux/amd64"
          docker buildx build --push \
            --build-arg HZ_VERSION=${{ env.HZ_VERSION }} \
            --build-arg JDK_VERSION=${{ matrix.jdk }} \
            --build-arg HAZELCAST_ZIP_URL=$(get_hz_dist_zip "${{ matrix.variant }}" "${{ env.HZ_VERSION }}") \
            ${TAGS_ARG} \
            --platform=${PLATFORMS} $DOCKER_DIR

      - name: Install `preflight` OpenShift tool from GitHub
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          preflight: "latest"
          source: github
          skip_cache: true

      - name: Run preflight scan
        run: |
          source .github/scripts/logging.functions.sh

          PREFLIGHT_OUTPUT=$(preflight check container "${RHEL_IMAGE}" \
            --submit --pyxis-api-token=${RHEL_API_KEY} \
            --certification-component-id=${RHEL_PROJECT_ID} \
            --docker-config ~/.docker/config.json \
            2>&1)

          echodebug "${PREFLIGHT_OUTPUT}"

          IMAGE_ID=$(grep --perl-regexp --only-matching "image id is: \K[a-f0-9]+" <<< "${PREFLIGHT_OUTPUT}" || true)

          if [[ -n "${IMAGE_ID}" ]]; then
            echo "IMAGE_ID=${IMAGE_ID}" >> $GITHUB_ENV
          else
            echoerr "Unable to extract image ID from preflight output:"
            echoerr "${PREFLIGHT_OUTPUT}"
            exit 1
          fi

      - name: Wait for Scan to Complete
        run: |
          source .github/scripts/publish-rhel.sh

          wait_for_container_scan "${RHEL_PROJECT_ID}" "${IMAGE_ID}" "${RHEL_API_KEY}" "${TIMEOUT_IN_MINS}"

      - name: Publish the Hazelcast Enterprise image
        run: |
          source .github/scripts/publish-rhel.sh

          publish_the_image "${RHEL_PROJECT_ID}" "${IMAGE_ID}" "${RHEL_API_KEY}"
          wait_for_container_publish "${RHEL_PROJECT_ID}" "${IMAGE_ID}" "${RHEL_API_KEY}" "${TIMEOUT_IN_MINS}"
          sync_tags "${RHEL_PROJECT_ID}" "${IMAGE_ID}" "${RHEL_API_KEY}"

      - name: Check RedHat service status
        if: failure()
        uses: ./.github/actions/check-redhat-service-status

      - name: Slack notification
        uses: ./.github/actions/slack-notification
        if: failure()
        with:
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK }}
