name: Build EE RHEL image

on:
  workflow_dispatch:
    inputs:
      REF:
        description: 'The hazelcast-docker branch to build the image from'
        required: true
      IS_LTS_OVERRIDE:
        description: 'Override is LTS release'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - 'false'
          - 'true'
      DRY_RUN:
        description: 'Skip pushing the images to remote registry'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
  workflow_call:
    inputs:
      REF:
        description: 'The hazelcast-docker branch to build the image from'
        required: true
        type: string
      IS_LTS_OVERRIDE:
        description: 'Override is LTS release'
        required: false
        default: ''
        type: string
      DRY_RUN:
        description: 'Skip pushing the images to remote registry'
        required: false
        default: 'false'
        type: string
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      HZ_VERSION: ${{ steps.get_hz_versions.outputs.HZ_VERSION_EE }}
      jdks: ${{ steps.jdks.outputs.jdks }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.REF }}

      - name: Get HZ versions
        id: get_hz_versions
        uses: hazelcast/docker-actions/get-hz-versions@master

      - name: Get supported JDKs
        id: jdks
        uses: hazelcast/docker-actions/get-supported-jdks@master
        with:
          HZ_VERSION: '${{ steps.get_hz_versions.outputs.HZ_VERSION_EE }}'

  build:
    needs: prepare
    env:
      SCAN_REGISTRY: "quay.io"
      TIMEOUT_IN_MINS: 240
      RHEL_API_KEY: ${{ secrets.RHEL_API_KEY }}
      HZ_VERSION: ${{ needs.prepare.outputs.HZ_VERSION }}
      RELEASE_VERSION: ${{ needs.prepare.outputs.RELEASE_VERSION }}
      DOCKER_DIR: ref/hazelcast-enterprise

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        jdk: ${{ fromJSON(needs.prepare.outputs.jdks) }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.REF }}
          path: ref

      - name: Setup Docker
        uses: ./.github/actions/setup-docker

      - uses: madhead/semver-utils@latest
        id: version
        with:
          version: ${{ env.HZ_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            OCP_LOGIN_USERNAME,CN/OCP_USERNAME
            OCP_LOGIN_PASSWORD,CN/OCP_PASSWORD
            OCP_CLUSTER_URL,CN/OCP_CLUSTER_URL

      - name: Set scan registry secrets
        run: |
          echo "SCAN_REGISTRY_USER=${{ secrets[format('SCAN_REGISTRY_USER_V{0}', steps.version.outputs.major)] }}" >> $GITHUB_ENV
          echo "SCAN_REGISTRY_PASSWORD=${{ secrets[format('SCAN_REGISTRY_PASSWORD_V{0}', steps.version.outputs.major)] }}" >> $GITHUB_ENV
          echo "RHEL_PROJECT_ID=${{ secrets[format('RHEL_PROJECT_ID_V{0}', steps.version.outputs.major)] }}" >> $GITHUB_ENV

      - name: Set RHEL image as environment variable
        run: |
          SCAN_REPOSITORY=${SCAN_REGISTRY}/redhat-isv-containers/${RHEL_PROJECT_ID}
          echo "SCAN_REPOSITORY=${SCAN_REPOSITORY}" >> $GITHUB_ENV
          echo "RHEL_IMAGE=${SCAN_REPOSITORY}:${RELEASE_VERSION}-jdk${{ matrix.jdk }}" >> $GITHUB_ENV

      - name: Log in to Red Hat Scan Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.SCAN_REGISTRY }}
          username: ${{ env.SCAN_REGISTRY_USER }}
          password: ${{ env.SCAN_REGISTRY_PASSWORD }}

      - name: Check if latest EE LTS release
        id: is_latest_lts
        uses: ./.github/actions/check-if-latest-lts-release
        with:
          release_version: ${{ env.RELEASE_VERSION }}
          is_lts_override: ${{ inputs.IS_LTS_OVERRIDE }}

      - name: Build the Hazelcast Enterprise image
        run: |
          . .github/scripts/get-tags-to-push.sh 
          . .github/scripts/docker.functions.sh
          . .github/scripts/ee-build.functions.sh

          IMAGE_NAME=${SCAN_REPOSITORY}
          DEFAULT_JDK="$(get_default_jdk ${DOCKER_DIR})"

          IS_LATEST_LTS="${{ steps.is_latest_lts.outputs.is_latest_lts }}"
          TAGS_TO_PUSH=$(get_tags_to_push "${{ env.RELEASE_VERSION }}" "" "${{ matrix.jdk }}" "$DEFAULT_JDK" "$IS_LATEST_LTS")
          echo "TAGS_TO_PUSH=$TAGS_TO_PUSH"
          TAGS_ARG=""
          for tag in ${TAGS_TO_PUSH[@]}
          do
            TAGS_ARG="${TAGS_ARG} --tag ${IMAGE_NAME}:${tag}"
          done

          output=

          PLATFORMS="linux/amd64"

          if [ "${{ inputs.DRY_RUN }}" == "true" ] ; then
            echo "DRY RUN: Skipping push for platforms ${PLATFORMS} and tags: ${TAGS_TO_PUSH}"
          else
            output=--push
          fi

          docker buildx build ${output} \
            --build-arg HZ_VERSION=${{ env.HZ_VERSION }} \
            --build-arg JDK_VERSION=${{ matrix.jdk }} \
            --build-arg HAZELCAST_ZIP_URL=$(get_hz_dist_zip "" "${{ env.HZ_VERSION }}") \
            ${TAGS_ARG} \
            --platform=${PLATFORMS} "${DOCKER_DIR}"

      - name: Install `preflight` OpenShift tool from GitHub
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          preflight: "latest"
          source: github
          skip_cache: true

      - name: Run preflight scan
        if: inputs.DRY_RUN != 'true'
        run: |
          source .github/scripts/logging.functions.sh

          PREFLIGHT_OUTPUT=$(preflight check container "${RHEL_IMAGE}" \
            --submit --pyxis-api-token=${RHEL_API_KEY} \
            --certification-component-id=${RHEL_PROJECT_ID} \
            --docker-config ~/.docker/config.json \
            2>&1)

          echodebug "${PREFLIGHT_OUTPUT}"

          IMAGE_ID=$(grep --perl-regexp --only-matching "image id is: \K[a-f0-9]+" <<< "${PREFLIGHT_OUTPUT}" || true)

          if [[ -n "${IMAGE_ID}" ]]; then
            echo "IMAGE_ID=${IMAGE_ID}" >> $GITHUB_ENV
          else
            echoerr "Unable to extract image ID from preflight output:"
            echoerr "${PREFLIGHT_OUTPUT}"
            exit 1
          fi

      - name: Publish the Hazelcast Enterprise image
        if: inputs.DRY_RUN != 'true'
        run: |
          .github/scripts/publish-rhel.sh "${RHEL_PROJECT_ID}" "${IMAGE_ID}" "${RHEL_API_KEY}" "${TIMEOUT_IN_MINS}"

      - name: Check RedHat service status
        if: failure()
        uses: ./.github/actions/check-redhat-service-status

      - name: Slack notification
        uses: hazelcast/docker-actions/slack-notification@master
        if: failure() && github.triggering_actor == 'devOpsHazelcast'
        with:
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK }}
