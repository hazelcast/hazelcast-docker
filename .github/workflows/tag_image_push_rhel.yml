name: Push EE RHEL image

on:
  workflow_dispatch:
    inputs:
      HZ_VERSION:
        description: 'Version of Hazelcast to build the image for, e.g. 5.1.1, 5.0.1'
        required: true
      JDKS:
        description: 'e.g. `[17, 21]`'
        required: true
      IS_LATEST_LTS:
        description: 'e.g. `false`'
        required: true
      DEFAULT_JDK:
        description: 'e.g. `21`'
        required: true
      ENVIRONMENT:
        description: 'Environment to use'
        required: true
        type: environment
  workflow_call:
    inputs:
      HZ_VERSION:
        description: 'Version of Hazelcast to build the image for, e.g. 5.1.1, 5.0.1'
        required: true
        type: string
      JDKS:
        description: 'e.g. `[17, 21]`'
        required: true
        type: string
      IS_LATEST_LTS:
        description: 'e.g. `false`'
        required: true
        type: string
      DEFAULT_JDK:
        description: 'e.g. `21`'
        required: true
        type: string
      ENVIRONMENT:
        description: 'Environment to use'
        required: true
        type: string
jobs:
  build:
    env:
      SCAN_REGISTRY: "quay.io"
      TIMEOUT_IN_MINS: 240
      RHEL_API_KEY: ${{ secrets.RHEL_API_KEY }}
    environment: ${{ inputs.ENVIRONMENT }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        jdk: ${{ fromJSON(inputs.JDKS) }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: madhead/semver-utils@latest
        id: version
        with:
          version: ${{ inputs.HZ_VERSION }}

      - name: Set scan registry secrets
        id: scan_registry_secrets
        run: |
          # Some repositories have a separate projects for each (major) version
          # First see if a version-specific secret exists, falling back to default

          PROJECT_ID=${{ secrets[format('RHEL_PROJECT_ID_V{0}', steps.version.outputs.major)] }}
          if [[ -z "${PROJECT_ID}" ]]; then
            PROJECT_ID=${{ secrets.RHEL_PROJECT_ID }}
          fi
          echo "PROJECT_ID=${PROJECT_ID}" >> ${GITHUB_OUTPUT}

          echo "USERNAME=redhat-isv-containers+${PROJECT_ID}-robot" >> ${GITHUB_OUTPUT}

          PASSWORD=${{ secrets[format('SCAN_REGISTRY_PASSWORD_V{0}', steps.version.outputs.major)] }}
          if [[ -z "${PASSWORD}" ]]; then
            PASSWORD=${{ secrets.SCAN_REGISTRY_PASSWORD }}
          fi
          echo "PASSWORD=${PASSWORD}" >> ${GITHUB_OUTPUT}

          echo "SCAN_REPOSITORY=${SCAN_REGISTRY}/redhat-isv-containers/${PROJECT_ID}" >> ${GITHUB_OUTPUT}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Log in to Red Hat Scan Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.SCAN_REGISTRY }}
          username: ${{ steps.scan_registry_secrets.outputs.USERNAME }}
          password: ${{ steps.scan_registry_secrets.outputs.PASSWORD }}

      - name: Copy image to RedHat Container Registry
        run: |
          . .github/scripts/get-tags-to-push.sh 

          copy_image()
          {
            local source_tag=$1
            local destination_tag=$2

            # Deliberately only copy a single architecture - https://github.com/hazelcast/hazelcast-docker/pull/1042#issuecomment-3141395993
            skopeo copy \
              --override-os linux \
              --override-arch amd64 \
              docker://${{ vars.DOCKERHUB_NAMESPACE }}/${{ vars.DOCKERHUB_EE_IMAGE_NAME }}:${source_tag} \
              docker://${{ steps.scan_registry_secrets.outputs.SCAN_REPOSITORY }}:${destination_tag}
          }

          TAGS_TO_PUSH=$(get_tags_to_push "${{ inputs.HZ_VERSION }}" "" "${{ matrix.jdk }}" "${{ inputs.DEFAULT_JDK }}" "${{ inputs.IS_LATEST_LTS }}")
          echo "TAGS_TO_PUSH=$TAGS_TO_PUSH"

          for tag in ${TAGS_TO_PUSH[@]}
          do
            copy_image ${tag} ${tag}
          done

          # Add a "unique" tag to workaround RedHat bug
          # Get the first tag
          PRIMARY_TAG=${TAGS_TO_PUSH%% *}
          # Keep a reference to _a_ tag to get the image later on
          echo "PRIMARY_TAG=${PRIMARY_TAG}" >> ${GITHUB_ENV}

          # Add date as a dummy tag (e.g. 5.4.1-jdk17-20250909130347)
          copy_image ${PRIMARY_TAG} ${PRIMARY_TAG}-$(date +"%Y%m%d%H%M%S")

      - name: Install `preflight` OpenShift tool from GitHub
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          preflight: "latest"
          source: github
          skip_cache: true

      - name: Run preflight scan
        run: |
          preflight check container "${{ steps.scan_registry_secrets.outputs.SCAN_REPOSITORY }}:${PRIMARY_TAG}" \
            --submit --pyxis-api-token=${RHEL_API_KEY} \
            --certification-component-id=${{ steps.scan_registry_secrets.outputs.PROJECT_ID }} \
            --docker-config ~/.docker/config.json

      - name: Check RedHat service status
        if: failure()
        uses: hazelcast/docker-actions/check-redhat-service-status@master
