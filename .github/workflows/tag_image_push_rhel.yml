name: Push EE RHEL image

on:
  workflow_dispatch:
jobs:
  build:
    environment: live
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Red Hat Scan Registry
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: redhat-isv-containers+${{ secrets.RHEL_PROJECT_ID_V5 }}-robot
          password: ${{ secrets.SCAN_REGISTRY_PASSWORD_V5 }}

      - name: Copy image to RedHat Container Registry
        run: |
          copy_image()
          {
            local source_tag=$1
            local destination_tag=$2

            # Deliberately only copy a single architecture - https://github.com/hazelcast/hazelcast-docker/pull/1042#issuecomment-3141395993
            skopeo copy \
              --override-os linux \
              --override-arch amd64 \
              docker://${{ vars.DOCKERHUB_NAMESPACE }}/${{ vars.DOCKERHUB_EE_IMAGE_NAME }}:${source_tag} \
              docker://quay.io/redhat-isv-containers/${{ secrets.RHEL_PROJECT_ID_V5 }}:${destination_tag}
          }

          TAGS_TO_PUSH="5.4.3-jdk21 5.4.3 5.4-jdk21 5.4"
          echo "TAGS_TO_PUSH=$TAGS_TO_PUSH"

          for tag in ${TAGS_TO_PUSH[@]}
          do
            copy_image ${tag} ${tag}
          done

          # Add a "unique" tag to workaround RedHat bug
          # Get the first tag
          PRIMARY_TAG=${TAGS_TO_PUSH%% *}
          # Keep a reference to _a_ tag to get the image later on
          echo "PRIMARY_TAG=${PRIMARY_TAG}" >> ${GITHUB_ENV}

          # Add date as a dummy tag (e.g. 5.4.1-jdk17-20250909130347)
          copy_image ${PRIMARY_TAG} ${PRIMARY_TAG}-$(date +"%Y%m%d%H%M%S")

      - name: Install `preflight` OpenShift tool from GitHub
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          preflight: "latest"
          source: github
          skip_cache: true

      - name: Run preflight scan
        run: |
          preflight check container "quay.io/redhat-isv-containers/${{ secrets.RHEL_PROJECT_ID_V5 }}:${PRIMARY_TAG}" \
            --submit --pyxis-api-token=${{ secrets.RHEL_API_KEY }} \
            --certification-component-id=${{ secrets.RHEL_PROJECT_ID_V5 }} \
            --docker-config ~/.docker/config.json
