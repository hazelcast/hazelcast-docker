name: Push EE RHEL image

on:
  workflow_call:
    inputs:
      HZ_VERSION:
        required: true
        type: string
      JDKS:
        required: true
        type: string
      IS_LATEST_LTS:
        required: true
        type: string
      DEFAULT_JDK:
        required: true
        type: string
jobs:
  build:
    env:
      SCAN_REGISTRY: "quay.io"
      TIMEOUT_IN_MINS: 240
      RHEL_API_KEY: ${{ secrets.RHEL_API_KEY }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # RedHat does not support concurrent publishing, run sequentially
      max-parallel: 1
      matrix:
        jdk: ${{ fromJSON(inputs.JDKS) }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: madhead/semver-utils@latest
        id: version
        with:
          version: ${{ inputs.HZ_VERSION }}

      - name: Set scan registry secrets
        run: |
          echo "SCAN_REGISTRY_USER=${{ secrets[format('SCAN_REGISTRY_USER_V{0}', steps.version.outputs.major)] }}" >> $GITHUB_ENV
          echo "SCAN_REGISTRY_PASSWORD=${{ secrets[format('SCAN_REGISTRY_PASSWORD_V{0}', steps.version.outputs.major)] }}" >> $GITHUB_ENV
          echo "RHEL_PROJECT_ID=${{ secrets[format('RHEL_PROJECT_ID_V{0}', steps.version.outputs.major)] }}" >> $GITHUB_ENV

      - name: Set scan repository as environment variable
        run: |
          echo "SCAN_REPOSITORY=${SCAN_REGISTRY}/redhat-isv-containers/${RHEL_PROJECT_ID}" >> $GITHUB_ENV

      - name: Log in to Red Hat Scan Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.SCAN_REGISTRY }}
          username: ${{ env.SCAN_REGISTRY_USER }}
          password: ${{ env.SCAN_REGISTRY_PASSWORD }}

      - name: Copy image to RedHat Container Registry
        run: |
          . .github/scripts/get-tags-to-push.sh

          TAGS_TO_PUSH=$(get_tags_to_push "${{ inputs.HZ_VERSION }}" "" "${{ matrix.jdk }}" "${{ inputs.DEFAULT_JDK }}" "${{ inputs.IS_LATEST_LTS }}")
          echo "TAGS_TO_PUSH=$TAGS_TO_PUSH"

          for tag in ${TAGS_TO_PUSH[@]}
          do
            # Keep a reference to _a_ tag to get the image later on
            echo "TAG=${tag}" >> ${GITHUB_ENV}

            # Deliberately only copy a single architecture - https://github.com/hazelcast/hazelcast-docker/pull/1042#issuecomment-3141395993
            skopeo copy \
              --override-os linux \
              --override-arch amd64 \
              docker://hazelcast/hazelcast-enterprise:${tag} \
              docker://${SCAN_REPOSITORY}:${tag}
          done

      - name: Install `preflight` OpenShift tool from GitHub
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          preflight: "latest"
          source: github
          skip_cache: true

      - name: Run preflight scan
        run: |
          source .github/scripts/logging.functions.sh

          PREFLIGHT_OUTPUT=$(preflight check container "${SCAN_REPOSITORY}:${TAG}" \
            --submit --pyxis-api-token=${RHEL_API_KEY} \
            --certification-component-id=${RHEL_PROJECT_ID} \
            --docker-config ~/.docker/config.json \
            2>&1)

          echodebug "${PREFLIGHT_OUTPUT}"

          IMAGE_ID=$(grep --perl-regexp --only-matching "image id is: \K[a-f0-9]+" <<< "${PREFLIGHT_OUTPUT}" || true)

          if [[ -n "${IMAGE_ID}" ]]; then
            echo "IMAGE_ID=${IMAGE_ID}" >> $GITHUB_ENV
          else
            echoerr "Unable to extract image ID from preflight output:"
            echoerr "${PREFLIGHT_OUTPUT}"
            exit 1
          fi

      - name: Publish the Hazelcast Enterprise image
        run: |
          .github/scripts/publish-rhel.sh "${RHEL_PROJECT_ID}" "${IMAGE_ID}" "${RHEL_API_KEY}" "${TIMEOUT_IN_MINS}"

      - name: Check RedHat service status
        if: failure()
        uses: hazelcast/docker-actions/check-redhat-service-status@master
