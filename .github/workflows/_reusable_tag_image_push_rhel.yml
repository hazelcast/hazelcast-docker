name: Build EE RHEL image

on:
  workflow_call:
    inputs:
      HZ_VERSION:
        type: string
        description: 'Version of Hazelcast to build the image for, e.g. 5.1.1, 5.0.1'
        required: true
      RELEASE_VERSION:
        type: string
        description: 'Version of the docker image e.g. 5.1.1, 5.1.1-1, defaults to HZ_VERSION'
        required: false
      IS_LTS_OVERRIDE:
        description: 'Override is LTS release'
        required: false
        type: string
        default: ''
      DRY_RUN:
        description: 'Skip pushing the images to remote registry'
        default: 'false'
        type: string
jobs:
  prepare:
    runs-on: ubuntu-latest
    name: Prepare environment
    outputs:
      jdks: ${{ steps.jdks.outputs.jdks }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get supported JDKs
        id: jdks
        uses: hazelcast/hazelcast-docker/.github/actions/get-supported-jdks@reusable-build-pr
        with:
          HZ_VERSION: '${{ inputs.HZ_VERSION || github.ref_name }}'

  build:
    env:
      SCAN_REGISTRY: "quay.io"
      TIMEOUT_IN_MINS: 240
      RHEL_API_KEY: ${{ secrets.RHEL_API_KEY }}
      HZ_VERSION: ${{ inputs.HZ_VERSION }}
      RELEASE_VERSION: ${{ inputs.RELEASE_VERSION }}

    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        jdk: ${{ fromJSON(needs.prepare.outputs.jdks) }}
    steps:
      - name: Set HZ version as environment variable
        if: env.HZ_VERSION == ''
        run: |
          echo "HZ_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV

      - name: Set Release version as environment variable
        if: env.RELEASE_VERSION == ''
        run: |
          echo "RELEASE_VERSION=${{ env.HZ_VERSION }}" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      - name:  Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.5.1

      - uses: madhead/semver-utils@latest
        id: version
        with:
          version: ${{ env.HZ_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            OCP_LOGIN_USERNAME,CN/OCP_USERNAME
            OCP_LOGIN_PASSWORD,CN/OCP_PASSWORD
            OCP_CLUSTER_URL,CN/OCP_CLUSTER_URL

      - name: Set scan registry secrets
        run: |
          echo "SCAN_REGISTRY_USER=${{ secrets[format('SCAN_REGISTRY_USER_V{0}', steps.version.outputs.major)] }}" >> $GITHUB_ENV
          echo "SCAN_REGISTRY_PASSWORD=${{ secrets[format('SCAN_REGISTRY_PASSWORD_V{0}', steps.version.outputs.major)] }}" >> $GITHUB_ENV
          echo "RHEL_PROJECT_ID=${{ secrets[format('RHEL_PROJECT_ID_V{0}', steps.version.outputs.major)] }}" >> $GITHUB_ENV

      - name: Set RHEL image as environment variable
        run: |
          SCAN_REPOSITORY=${SCAN_REGISTRY}/redhat-isv-containers/${RHEL_PROJECT_ID}
          echo "SCAN_REPOSITORY=${SCAN_REPOSITORY}" >> $GITHUB_ENV
          echo "RHEL_IMAGE=${SCAN_REPOSITORY}:${RELEASE_VERSION}-jdk${{ matrix.jdk }}" >> $GITHUB_ENV

      - name: Log in to Red Hat Scan Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.SCAN_REGISTRY }}
          username: ${{ env.SCAN_REGISTRY_USER }}
          password: ${{ env.SCAN_REGISTRY_PASSWORD }}

      - name: Check if latest EE LTS release
        id: is_latest_lts
        uses: hazelcast/hazelcast-docker/.github/actions/check-if-latest-lts-release@reusable-build-pr
        with:
          release_version: ${{ env.RELEASE_VERSION }}
          is_lts_override: ${{ inputs.IS_LTS_OVERRIDE }}

      - name: Get default JDK for hazelcast-enterprise
        id: get_default_ee_jdk
        uses: hazelcast/hazelcast-docker/.github/actions/docker-info@reusable-build-pr
        with:
          DOCKER_PATH: hazelcast-enterprise

      - name: Get EE dist ZIP URL
        id: get_ee_dist_url
        uses: hazelcast/hazelcast-docker/.github/actions/get-hz-ee-dist-url@reusable-build-pr
        with:
          HZ_VERSION: ${{ env.HZ_VERSION }}
          VARIANT: ""

      - name: Get EE tags to push
        id: get_ee_tags_to_push
        uses: hazelcast/hazelcast-docker/.github/actions/get-tags-to-push@reusable-build-pr
        with:
          HZ_VERSION: ${{ env.RELEASE_VERSION }}
          SUFFIX: ""
          CURRENT_JDK: ${{ matrix.jdk }}
          DEFAULT_JDK: ${{ steps.get_default_ee_jdk.outputs.DEFAULT_JDK }}
          IS_LATEST_LTS: ${{ steps.is_latest_lts.outputs.is_latest_lts }}

      - name: Build the Hazelcast Enterprise image
        run: |
          DOCKER_DIR=hazelcast-enterprise
          IMAGE_NAME=${SCAN_REPOSITORY}

          TAGS_TO_PUSH="${{ steps.get_ee_tags_to_push.outputs.TAGS_TO_PUSH }}"
          echo "TAGS_TO_PUSH=$TAGS_TO_PUSH"
          TAGS_ARG=""
          for tag in ${TAGS_TO_PUSH[@]}
          do
            TAGS_ARG="${TAGS_ARG} --tag ${IMAGE_NAME}:${tag}"
          done

          output=

          PLATFORMS="linux/amd64"

          if [ "${{ inputs.DRY_RUN }}" == "true" ] ; then
            echo "DRY RUN: Skipping push for platforms ${PLATFORMS} and tags: ${TAGS_TO_PUSH}"
          else
            output=--push
          fi

          docker buildx build ${output} \
            --build-arg HZ_VERSION=${{ env.HZ_VERSION }} \
            --build-arg JDK_VERSION=${{ matrix.jdk }} \
            --build-arg HAZELCAST_ZIP_URL=${{ steps.get_ee_dist_url.outputs.HAZELCAST_EE_ZIP_URL }} \
            ${TAGS_ARG} \
            --platform=${PLATFORMS} "${DOCKER_DIR}"

      - name: Install `preflight` OpenShift tool from GitHub
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          preflight: "latest"
          source: github
          skip_cache: true

      - name: Run preflight scan
        if: inputs.DRY_RUN != 'true'
        run: |
          function echoerr() {
            # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions#setting-an-error-message
            # Support multi-line strings by replacing line separator with GitHub Actions compatible one
            echo "::error::ERROR - ${*//$'\n'/%0A}" 1>&2;
          }
          function echodebug() {
            # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions#setting-a-debug-message
            echo "::debug::$*" 1>&2;
          }

          PREFLIGHT_OUTPUT=$(preflight check container "${RHEL_IMAGE}" \
            --submit --pyxis-api-token=${RHEL_API_KEY} \
            --certification-component-id=${RHEL_PROJECT_ID} \
            --docker-config ~/.docker/config.json \
            2>&1)

          echodebug "${PREFLIGHT_OUTPUT}"

          IMAGE_ID=$(grep --perl-regexp --only-matching "image id is: \K[a-f0-9]+" <<< "${PREFLIGHT_OUTPUT}" || true)

          if [[ -n "${IMAGE_ID}" ]]; then
            echo "IMAGE_ID=${IMAGE_ID}" >> $GITHUB_ENV
          else
            echoerr "Unable to extract image ID from preflight output:"
            echoerr "${PREFLIGHT_OUTPUT}"
            exit 1
          fi

      - name: Publish the Hazelcast Enterprise image
        if: inputs.DRY_RUN != 'true'
        uses: hazelcast/hazelcast-docker/.github/actions/publish-rhel-image@reusable-build-pr
        with:
          RHEL_PROJECT_ID: ${{ env.RHEL_PROJECT_ID }}
          IMAGE_ID: ${{ env.IMAGE_ID }}
          RHEL_API_KEY: ${{ env.RHEL_API_KEY }}
          TIMEOUT_IN_MINS: ${{ env.TIMEOUT_IN_MINS }}

      - name: Check RedHat service status
        if: failure()
        uses: ./.github/actions/check-redhat-service-status

      - name: Slack notification
        uses: ./.github/actions/slack-notification
        if: failure()
        with:
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK }}
